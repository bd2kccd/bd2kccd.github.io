{
    "docs": [
        {
            "location": "/", 
            "text": "The Center for Causal Discovery: Tools and Software\n\n\ncausal-cmd\n \n(early release)\n - a Java API and command line implementation of algorithms for performing causal discovery on big data. Use this software if you are interested incorporating analysis via a shell script or in a Java-based program. The software currently includes Fast Greedy Search (\nFGS\n) for continuous or discrete variables \u2013 an optimized version of Greedy Equivalence Search (\nGES\n) tested with datasets that contain as many as 1 million continuous variables, and Greedy Fast Causal Inference (\nGFCI\n) for continuous variables.\n\n\n\n\nDownload the latest release i.e., causal-cmd-X.X.X-jar-with-dependencies.jar\n\n\nDocumentation for the big data enabled causal discovery algorithms\n\n\nReport bugs or issues with the software\n\n\nCausal-cmd Github project\n\n\n\n\ntetrad\n - a Java API, and desktop environment for learning, performing analyses and experimenting with causal discovery algorithms.\n\n\n\n\nTetrad Project Website\n\n\nDownload latest release of tetrad i.e., tetrad-gui-X.X.X-launch.jar\n\n\nDownload command line version i.e., tetrad-lib-X.X.X-tetradcmd.jar\n\n\nDocumentation for the big data enabled causal discovery algorithms\n\n\nCausal-cmd Github project\n\n\n\n\ncausal-web\n \n(early release)\n \u2013 our user-friendly web-based graphical interface for performing causal discovery analysis on big data using large memory servers at the Pittsburgh Supercomputing Center. Use this software if you want to quickly try out a causal discovery algorithm or if you have big data which cannot be analyzed on your local hardware.\n\n\n\n\nCCD Web Application\n\n\nReport bugs or issues with the software\n\n\nDocumentation for the big data enabled causal discovery algorithms\n\n-\nGithub project\n\n\n\n\nPy-causal\n \n(early release)\n - a python module that wraps algorithms for performing causal discovery on big data. The software currently includes Fast Greedy Search (\nFGS\n) for both continuous and discrete variables, and Greedy Fast Causal Inference (\nGFCI\n) for continuous variables.\n\n\n\n\nGithub project\n\n\nDocker container of Jupyter Notebook with Py-causal configured\n\n\nDocumentation for the big data enabled causal discovery algorithms\n\n\n\n\nR-causal\n \n(early release)\n - an R module that that wraps algorithms for performing causal discovery on big data. The software currently includes Fast Greedy Search (\nFGS\n) for both continuous and discrete variables, and Greedy Fast Causal Inference (\nGFCI\n) for continuous variables.\n\n\n\n\nGithub project\n\n\nDocker container of Jupyter Notebook with R-causal configured\n\n\nDocumentation for the big data enabled causal discovery algorithms\n\n\n\n\ncytoscape-tetrad\n - a native cytoscape plugin that imports tetrad txt output files that contain the structure of a causal graph. It handles causal graphs and partial ancestral graphs.\n\n\nIf you use our software in your research, please acknowledge the Center for Causal Discovery, supported by grant U54HG008540, in any papers, presentations, or other dissemination of your work.\n\n\nAll software is open-source and released under a dual licensing model. For non-profit institutions, the software is available under the GNU General Public License (GPL) v2 license. For-profit organizations that wish to commercialize enhanced or customized versions of the software will be able to purchase a commercial license on a case-by-case basis. The GPL license permits individuals to modify the source code and to share modifications with other colleagues/investigators. Specifically, it permits the dissemination and commercialization of enhanced or customized versions as well as incorporation of the software or its pieces into other license-compatible software packages, as long as modifications or enhancements are made open source.\n\n\nThe above software are early release versions. By using software provided by the Center for Causal Discovery, you agree that no warranties of any kind are made by Carnegie Mellon University or the University of Pittsburgh with respect to the data provided by the software or any use thereof, and the universities hereby disclaim the implied warranties of merchantability, fitness for a particular purpose, and non-infringement. The universities shall not be liable for any claims, losses, or damages of any kind arising from the data provided by the software or any use thereof.", 
            "title": "Home"
        }, 
        {
            "location": "/#the-center-for-causal-discovery-tools-and-software", 
            "text": "causal-cmd   (early release)  - a Java API and command line implementation of algorithms for performing causal discovery on big data. Use this software if you are interested incorporating analysis via a shell script or in a Java-based program. The software currently includes Fast Greedy Search ( FGS ) for continuous or discrete variables \u2013 an optimized version of Greedy Equivalence Search ( GES ) tested with datasets that contain as many as 1 million continuous variables, and Greedy Fast Causal Inference ( GFCI ) for continuous variables.   Download the latest release i.e., causal-cmd-X.X.X-jar-with-dependencies.jar  Documentation for the big data enabled causal discovery algorithms  Report bugs or issues with the software  Causal-cmd Github project   tetrad  - a Java API, and desktop environment for learning, performing analyses and experimenting with causal discovery algorithms.   Tetrad Project Website  Download latest release of tetrad i.e., tetrad-gui-X.X.X-launch.jar  Download command line version i.e., tetrad-lib-X.X.X-tetradcmd.jar  Documentation for the big data enabled causal discovery algorithms  Causal-cmd Github project   causal-web   (early release)  \u2013 our user-friendly web-based graphical interface for performing causal discovery analysis on big data using large memory servers at the Pittsburgh Supercomputing Center. Use this software if you want to quickly try out a causal discovery algorithm or if you have big data which cannot be analyzed on your local hardware.   CCD Web Application  Report bugs or issues with the software  Documentation for the big data enabled causal discovery algorithms \n- Github project   Py-causal   (early release)  - a python module that wraps algorithms for performing causal discovery on big data. The software currently includes Fast Greedy Search ( FGS ) for both continuous and discrete variables, and Greedy Fast Causal Inference ( GFCI ) for continuous variables.   Github project  Docker container of Jupyter Notebook with Py-causal configured  Documentation for the big data enabled causal discovery algorithms   R-causal   (early release)  - an R module that that wraps algorithms for performing causal discovery on big data. The software currently includes Fast Greedy Search ( FGS ) for both continuous and discrete variables, and Greedy Fast Causal Inference ( GFCI ) for continuous variables.   Github project  Docker container of Jupyter Notebook with R-causal configured  Documentation for the big data enabled causal discovery algorithms   cytoscape-tetrad  - a native cytoscape plugin that imports tetrad txt output files that contain the structure of a causal graph. It handles causal graphs and partial ancestral graphs.  If you use our software in your research, please acknowledge the Center for Causal Discovery, supported by grant U54HG008540, in any papers, presentations, or other dissemination of your work.  All software is open-source and released under a dual licensing model. For non-profit institutions, the software is available under the GNU General Public License (GPL) v2 license. For-profit organizations that wish to commercialize enhanced or customized versions of the software will be able to purchase a commercial license on a case-by-case basis. The GPL license permits individuals to modify the source code and to share modifications with other colleagues/investigators. Specifically, it permits the dissemination and commercialization of enhanced or customized versions as well as incorporation of the software or its pieces into other license-compatible software packages, as long as modifications or enhancements are made open source.  The above software are early release versions. By using software provided by the Center for Causal Discovery, you agree that no warranties of any kind are made by Carnegie Mellon University or the University of Pittsburgh with respect to the data provided by the software or any use thereof, and the universities hereby disclaim the implied warranties of merchantability, fitness for a particular purpose, and non-infringement. The universities shall not be liable for any claims, losses, or damages of any kind arising from the data provided by the software or any use thereof.", 
            "title": "The Center for Causal Discovery: Tools and Software"
        }, 
        {
            "location": "/causal-cmd/", 
            "text": "Documentation on using the causal-cmd software\n\n\nWhat is causal-cmd\n\n\nCausal-cmd is a Java application that provides a command-line interface (CLI) and application programming interface (API) for causal discovery algorithms produced by the Center for Causal Discovery. The current version is tetrad-5.3.0-20160318. The application currently includes the algorithm(s):\n\n\n\n\nFGSc (Fast Greedy Search) for continuous data - is an optimization of the Greedy Equivalence Search algorithm (GES,   Meek    1995;   Chickering  2003). The optimizations are described in Scaling up Greedy Causal Search for Continuous Variables\n\n\nFGSd (Fast Greedy Search) for discrete data\n\n\nGFCIc (Greedy Fast Causal Inferece) for continuous data\n\n\n\n\nCausal discovery algorithms are a class of search algorithms that explore a space of graphical causal models, i.e., graphical models where directed edges imply causation, for a model (or models) that are a good fit for a dataset. We suggest that newcomers to the field review Causation, Prediction and Search by Spirtes, Glymour and Scheines for a primer on the subject.\n\n\nCausal discovery algorithms allow a user to uncover the causal relationships between variables in a dataset. These discovered causal relationships may be used further--understanding the underlying the processes of a system (e.g., the metabolic pathways of an organism), hypothesis generation (e.g., variables that best explain an outcome), guide experimentation (e.g., what gene knockout experiments should be performed) or prediction (e.g. parameterization of the causal graph using data and then using it as a classifier).\n\n\nHow can I use it?\n\n\nava 8 is the only prerequisite to run the software. Note that by default Java will allocate the smaller of 1/4 system memory or 1GB to the Java virtual machine (JVM). If you run out of memory (heap memory space) running your analyses you should increase the memory allocated to the JVM with the following switch '-XmxXXG' where XX is the number of gigabytes of ram you allow the JVM to utilize. For example to allocate 8 gigabytes of ram you would add -Xmx8G immediately after the java command.\n\n\nRun an example output using known data via command line\n\n\nDownload the this file, \nRetention.txt\n, which is a dataset containing information on college graduation and used in the publication \"What Do College Ranking Data Tell Us About Student Retention?\" by Drudzel and Glymour, 1994.\n\n\njava -jar causal-cmd-5.3.0-20160330-jar-with-dependencies.jar --algorithm fgs --data Retention.txt  --depth -1 --output output --verbose\n\n\n\n\nThe program will output the results of the FGS search procedure as a text file (in this example to output). The beginning of the file contains the algorithm parameters used in the search.\n\n\nInspect the output which should show a graph with the following edges.\n\n\nGraph Edges: \n1. fac_salary --- spending_per_stdt\n2. spending_per_stdt --\n rjct_rate\n3. spending_per_stdt --- stdt_tchr_ratio\n4. stdt_accept_rate --- fac_salary\n5. stdt_clss_stndng --\n rjct_rate\n6. tst_scores --- fac_salary\n7. tst_scores --- grad_rate\n8. tst_scores --- spending_per_stdt\n9. tst_scores --- stdt_clss_stndng\n\n\n\n\nIn FGS, \"Elapsed getEffectEdges = XXms\" refers to the amount of time it took to evaluate all pairs of variables for correlation. The file then details each step taken in the greedy search procedure i.e., insertion or deletion of edges based on a scoring function (i.e., BIC score difference for each chosen search operation).\n\n\nThe end of the file contains the causal graph from the search procedure. Here is a key to the edge types\n\n\nA---B There is causal relationship between variable A and B but we cannot determine the direction of the relationship\nA--\nB There is a causal relationship from variable A to B\n\n\n\n\nUse as an API\n\n\nHere is an example of using the Tetrad library which is included in causal-cmd as an API. Javadocs for the API are \nhere\n.\n\n\npackage edu.cmu.tetrad.cli.search;\n\nimport edu.cmu.tetrad.cli.data.ContinuousDataReader;\nimport edu.cmu.tetrad.cli.data.TabularContinuousDataReader;\nimport edu.cmu.tetrad.cli.validation.DataValidation;\nimport edu.cmu.tetrad.cli.validation.TabularContinuousData;\nimport edu.cmu.tetrad.data.CovarianceMatrixOnTheFly;\nimport edu.cmu.tetrad.data.DataSet;\nimport edu.cmu.tetrad.graph.Graph;\nimport edu.cmu.tetrad.search.Fgs;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\n/**\n * Author : Jeremy Espino MD\n * Created  2/12/16 9:44 AM\n */\npublic class FgsApiExample {\n\n    public static void main(String[] args) throws Exception {\n\n        // set path to Retention data\n        Path dataFile = Paths.get(\ntetrad-cli/test/data\n, \nRetention.txt\n);\n\n        Character delimiter = '\\t';\n\n        // perform data validation\n        // note: assuming data has unique variable names and does not contain zero covariance pairs\n        DataValidation dataValidation = new TabularContinuousData(dataFile, delimiter);\n        if (!dataValidation.validate(System.err, true)) {\n            System.exit(-128);\n        }\n\n        ContinuousDataReader dataReader = new TabularContinuousDataReader(dataFile, delimiter);\n        DataSet dataSet = dataReader.readInData();\n\n        Fgs fgs = new Fgs(new CovarianceMatrixOnTheFly(dataSet));\n        fgs.setOut(System.out);\n        fgs.setDepth(-1);\n        fgs.setIgnoreLinearDependent(false);\n        fgs.setPenaltyDiscount(4.0);\n        fgs.setNumPatternsToStore(0);  // always set to zero\n        fgs.setFaithfulnessAssumed(true);\n        fgs.setVerbose(true);\n\n        Graph graph = fgs.search();\n        System.out.println();\n        System.out.println(graph.toString().trim());\n        System.out.flush();\n\n    }\n}\n\n\n\n\nCommand line interface usage\n\n\nTetrad-cli has different switches for different algorithms.\n\n\ncausal-cmd usage for FGS for continuous data\n\n\nusage: java -jar causal-cmd-5.3.0-SNAPSHOT.jar --algorithm fgs [-d \narg\n] [--depth \narg\n] [--disable-heuristic-speedup] [--exclude-variables \narg\n] -f \narg\n [--graphml] [--help] [--ignore-linear-dependence] [--json] [--knowledge \narg\n] [--no-validation-output] [-o \narg\n] [--output-prefix \narg\n] [--penalty-discount \narg\n] [--skip-non-zero-variance] [--skip-unique-var-name] [--thread \narg\n] [--verbose]\n -d,--delimiter \narg\n             Data delimiter either comma, semicolon, space, colon, or tab. Default: comma for *.csv, else tab.\n    --depth \narg\n                 Search depth. Must be an integer \n= -1 (-1 means unlimited). Default is -1.\n    --disable-heuristic-speedup   Disable heuristic speedup. Default is false.\n    --exclude-variables \narg\n     A file containing variables to exclude.\n -f,--data \narg\n                  Data file.\n    --graphml                     Create graphML output.\n    --help                        Show help.\n    --ignore-linear-dependence    Ignore linear dependence.\n    --json                        Create JSON output.\n    --knowledge \narg\n             A file containing prior knowledge.\n    --no-validation-output        No validation output files created.\n -o,--out \narg\n                   Output directory.\n    --output-prefix \narg\n         Prefix name of output files.\n    --penalty-discount \narg\n      Penalty discount. Default is 4.0\n    --skip-non-zero-variance      Skip check for zero variance variables.\n    --skip-unique-var-name        Skip check for unique variable names.\n    --thread \narg\n                Number of threads.\n    --verbose                     Print additional information.\n\n\n\n\ncausal-cmd usage for FGS for discrete data\n\n\nusage: java -jar causal-cmd-5.3.0-SNAPSHOT.jar --algorithm fgs-discrete [-d \narg\n] [--depth \narg\n] [--disable-heuristic-speedup] [--exclude-variables \narg\n] -f \narg\n [--graphml] [--help] [--json] [--knowledge \narg\n] [--no-validation-output] [-o \narg\n] [--output-prefix \narg\n] [--sample-prior \narg\n] [--skip-category-limit] [--skip-unique-var-name] [--structure-prior \narg\n] [--thread \narg\n] [--verbose]\n -d,--delimiter \narg\n             Data delimiter either comma, semicolon, space, colon, or tab. Default: comma for *.csv, else tab.\n    --depth \narg\n                 Search depth. Must be an integer \n= -1 (-1 means unlimited). Default is -1.\n    --disable-heuristic-speedup   Heuristic speedup. Default is false.\n    --exclude-variables \narg\n     A file containing variables to exclude.\n -f,--data \narg\n                  Data file.\n    --graphml                     Create graphML output.\n    --help                        Show help.\n    --json                        Create JSON output.\n    --knowledge \narg\n             A file containing prior knowledge.\n    --no-validation-output        No validation output files created.\n -o,--out \narg\n                   Output directory.\n    --output-prefix \narg\n         Prefix name of output files.\n    --sample-prior \narg\n          Sample prior.\n    --skip-category-limit         Skip 'limit number of categories' check.\n    --skip-unique-var-name        Skip 'unique variable name' check.\n    --structure-prior \narg\n       Structure prior.\n    --thread \narg\n                Number of threads.\n    --verbose                     Print additional information.\n\n\n\n\ncausal-cmd usage for GFCI for continuous data\n\n\nusage: java -jar causal-cmd.jar --algorithm gfcic [--alpha \narg\n] [-d \narg\n] [--exclude-variables \narg\n] -f \narg\n [--faithfulness-assumed \narg\n] [--help] [--json] [--knowledge \narg\n] [--max-indegree \narg\n] [--no-validation-output] [-o \narg\n] [--output-prefix \narg\n] [--penalty-discount \narg\n] [--skip-latest] [--skip-non-zero-variance] [--skip-unique-var-name] [--thread \narg\n] [--verbose]\n    --alpha \narg\n                  Penalty discount. Default 4.\n -d,--delimiter \narg\n              Data delimiter either comma, semicolon, space, colon, or tab. Default: comma for *.csv, else tab.\n    --exclude-variables \narg\n      A file containing variables to exclude.\n -f,--data \narg\n                   Data file.\n    --faithfulness-assumed \narg\n   Yes if (one edge) faithfulness should be assumed. Default false.\n    --help                         Show help.\n    --json                         Create JSON output.\n    --knowledge \narg\n              A file containing prior knowledge.\n    --max-indegree \narg\n           Maximum indegree of graph. Default 100.\n    --no-validation-output         No validation output files created.\n -o,--out \narg\n                    Output directory.\n    --output-prefix \narg\n          Prefix name for output files.\n    --penalty-discount \narg\n       Penalty discount. Default 4.\n    --skip-latest                  Skip checking for latest software version\n    --skip-non-zero-variance       Skip check for zero variance variables.\n    --skip-unique-var-name         Skip check for unique variable names.\n    --thread \narg\n                 Number of threads.\n    --verbose                      Print additional information.\n\n\n\n\nPrior knowledge file example\n\n\n/knowledge\naddtemporal\n1 spending_per_stdt fac_salary stdt_tchr_ratio \n2 rjct_rate stdt_accept_rate \n3 tst_scores stdt_clss_stndng \n4* grad_rate \n\nforbiddirect\nx3 x4\n\nrequiredirect\nx1 x2\n\n\n\n\nThe first line must say /knowledge The three sections of knowledge are\n\n\n\n\nforbiddirect - forbidden edges indicated by a list of pairs of variables\n\n\nrequireddirect - required edges indicated by a list of pairs of variables\n\n\naddtemporal - tiers of variables where the first tier preceeds the last. Adding a asterisk next to the tier id prohibits edges between tier variables.", 
            "title": "Causal CMD"
        }, 
        {
            "location": "/causal-cmd/#documentation-on-using-the-causal-cmd-software", 
            "text": "", 
            "title": "Documentation on using the causal-cmd software"
        }, 
        {
            "location": "/causal-cmd/#what-is-causal-cmd", 
            "text": "Causal-cmd is a Java application that provides a command-line interface (CLI) and application programming interface (API) for causal discovery algorithms produced by the Center for Causal Discovery. The current version is tetrad-5.3.0-20160318. The application currently includes the algorithm(s):   FGSc (Fast Greedy Search) for continuous data - is an optimization of the Greedy Equivalence Search algorithm (GES,   Meek    1995;   Chickering  2003). The optimizations are described in Scaling up Greedy Causal Search for Continuous Variables  FGSd (Fast Greedy Search) for discrete data  GFCIc (Greedy Fast Causal Inferece) for continuous data   Causal discovery algorithms are a class of search algorithms that explore a space of graphical causal models, i.e., graphical models where directed edges imply causation, for a model (or models) that are a good fit for a dataset. We suggest that newcomers to the field review Causation, Prediction and Search by Spirtes, Glymour and Scheines for a primer on the subject.  Causal discovery algorithms allow a user to uncover the causal relationships between variables in a dataset. These discovered causal relationships may be used further--understanding the underlying the processes of a system (e.g., the metabolic pathways of an organism), hypothesis generation (e.g., variables that best explain an outcome), guide experimentation (e.g., what gene knockout experiments should be performed) or prediction (e.g. parameterization of the causal graph using data and then using it as a classifier).", 
            "title": "What is causal-cmd"
        }, 
        {
            "location": "/causal-cmd/#how-can-i-use-it", 
            "text": "ava 8 is the only prerequisite to run the software. Note that by default Java will allocate the smaller of 1/4 system memory or 1GB to the Java virtual machine (JVM). If you run out of memory (heap memory space) running your analyses you should increase the memory allocated to the JVM with the following switch '-XmxXXG' where XX is the number of gigabytes of ram you allow the JVM to utilize. For example to allocate 8 gigabytes of ram you would add -Xmx8G immediately after the java command.", 
            "title": "How can I use it?"
        }, 
        {
            "location": "/causal-cmd/#run-an-example-output-using-known-data-via-command-line", 
            "text": "Download the this file,  Retention.txt , which is a dataset containing information on college graduation and used in the publication \"What Do College Ranking Data Tell Us About Student Retention?\" by Drudzel and Glymour, 1994.  java -jar causal-cmd-5.3.0-20160330-jar-with-dependencies.jar --algorithm fgs --data Retention.txt  --depth -1 --output output --verbose  The program will output the results of the FGS search procedure as a text file (in this example to output). The beginning of the file contains the algorithm parameters used in the search.  Inspect the output which should show a graph with the following edges.  Graph Edges: \n1. fac_salary --- spending_per_stdt\n2. spending_per_stdt --  rjct_rate\n3. spending_per_stdt --- stdt_tchr_ratio\n4. stdt_accept_rate --- fac_salary\n5. stdt_clss_stndng --  rjct_rate\n6. tst_scores --- fac_salary\n7. tst_scores --- grad_rate\n8. tst_scores --- spending_per_stdt\n9. tst_scores --- stdt_clss_stndng  In FGS, \"Elapsed getEffectEdges = XXms\" refers to the amount of time it took to evaluate all pairs of variables for correlation. The file then details each step taken in the greedy search procedure i.e., insertion or deletion of edges based on a scoring function (i.e., BIC score difference for each chosen search operation).  The end of the file contains the causal graph from the search procedure. Here is a key to the edge types  A---B There is causal relationship between variable A and B but we cannot determine the direction of the relationship\nA-- B There is a causal relationship from variable A to B", 
            "title": "Run an example output using known data via command line"
        }, 
        {
            "location": "/causal-cmd/#use-as-an-api", 
            "text": "Here is an example of using the Tetrad library which is included in causal-cmd as an API. Javadocs for the API are  here .  package edu.cmu.tetrad.cli.search;\n\nimport edu.cmu.tetrad.cli.data.ContinuousDataReader;\nimport edu.cmu.tetrad.cli.data.TabularContinuousDataReader;\nimport edu.cmu.tetrad.cli.validation.DataValidation;\nimport edu.cmu.tetrad.cli.validation.TabularContinuousData;\nimport edu.cmu.tetrad.data.CovarianceMatrixOnTheFly;\nimport edu.cmu.tetrad.data.DataSet;\nimport edu.cmu.tetrad.graph.Graph;\nimport edu.cmu.tetrad.search.Fgs;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\n/**\n * Author : Jeremy Espino MD\n * Created  2/12/16 9:44 AM\n */\npublic class FgsApiExample {\n\n    public static void main(String[] args) throws Exception {\n\n        // set path to Retention data\n        Path dataFile = Paths.get( tetrad-cli/test/data ,  Retention.txt );\n\n        Character delimiter = '\\t';\n\n        // perform data validation\n        // note: assuming data has unique variable names and does not contain zero covariance pairs\n        DataValidation dataValidation = new TabularContinuousData(dataFile, delimiter);\n        if (!dataValidation.validate(System.err, true)) {\n            System.exit(-128);\n        }\n\n        ContinuousDataReader dataReader = new TabularContinuousDataReader(dataFile, delimiter);\n        DataSet dataSet = dataReader.readInData();\n\n        Fgs fgs = new Fgs(new CovarianceMatrixOnTheFly(dataSet));\n        fgs.setOut(System.out);\n        fgs.setDepth(-1);\n        fgs.setIgnoreLinearDependent(false);\n        fgs.setPenaltyDiscount(4.0);\n        fgs.setNumPatternsToStore(0);  // always set to zero\n        fgs.setFaithfulnessAssumed(true);\n        fgs.setVerbose(true);\n\n        Graph graph = fgs.search();\n        System.out.println();\n        System.out.println(graph.toString().trim());\n        System.out.flush();\n\n    }\n}", 
            "title": "Use as an API"
        }, 
        {
            "location": "/causal-cmd/#command-line-interface-usage", 
            "text": "Tetrad-cli has different switches for different algorithms.", 
            "title": "Command line interface usage"
        }, 
        {
            "location": "/causal-cmd/#causal-cmd-usage-for-fgs-for-continuous-data", 
            "text": "usage: java -jar causal-cmd-5.3.0-SNAPSHOT.jar --algorithm fgs [-d  arg ] [--depth  arg ] [--disable-heuristic-speedup] [--exclude-variables  arg ] -f  arg  [--graphml] [--help] [--ignore-linear-dependence] [--json] [--knowledge  arg ] [--no-validation-output] [-o  arg ] [--output-prefix  arg ] [--penalty-discount  arg ] [--skip-non-zero-variance] [--skip-unique-var-name] [--thread  arg ] [--verbose]\n -d,--delimiter  arg              Data delimiter either comma, semicolon, space, colon, or tab. Default: comma for *.csv, else tab.\n    --depth  arg                  Search depth. Must be an integer  = -1 (-1 means unlimited). Default is -1.\n    --disable-heuristic-speedup   Disable heuristic speedup. Default is false.\n    --exclude-variables  arg      A file containing variables to exclude.\n -f,--data  arg                   Data file.\n    --graphml                     Create graphML output.\n    --help                        Show help.\n    --ignore-linear-dependence    Ignore linear dependence.\n    --json                        Create JSON output.\n    --knowledge  arg              A file containing prior knowledge.\n    --no-validation-output        No validation output files created.\n -o,--out  arg                    Output directory.\n    --output-prefix  arg          Prefix name of output files.\n    --penalty-discount  arg       Penalty discount. Default is 4.0\n    --skip-non-zero-variance      Skip check for zero variance variables.\n    --skip-unique-var-name        Skip check for unique variable names.\n    --thread  arg                 Number of threads.\n    --verbose                     Print additional information.", 
            "title": "causal-cmd usage for FGS for continuous data"
        }, 
        {
            "location": "/causal-cmd/#causal-cmd-usage-for-fgs-for-discrete-data", 
            "text": "usage: java -jar causal-cmd-5.3.0-SNAPSHOT.jar --algorithm fgs-discrete [-d  arg ] [--depth  arg ] [--disable-heuristic-speedup] [--exclude-variables  arg ] -f  arg  [--graphml] [--help] [--json] [--knowledge  arg ] [--no-validation-output] [-o  arg ] [--output-prefix  arg ] [--sample-prior  arg ] [--skip-category-limit] [--skip-unique-var-name] [--structure-prior  arg ] [--thread  arg ] [--verbose]\n -d,--delimiter  arg              Data delimiter either comma, semicolon, space, colon, or tab. Default: comma for *.csv, else tab.\n    --depth  arg                  Search depth. Must be an integer  = -1 (-1 means unlimited). Default is -1.\n    --disable-heuristic-speedup   Heuristic speedup. Default is false.\n    --exclude-variables  arg      A file containing variables to exclude.\n -f,--data  arg                   Data file.\n    --graphml                     Create graphML output.\n    --help                        Show help.\n    --json                        Create JSON output.\n    --knowledge  arg              A file containing prior knowledge.\n    --no-validation-output        No validation output files created.\n -o,--out  arg                    Output directory.\n    --output-prefix  arg          Prefix name of output files.\n    --sample-prior  arg           Sample prior.\n    --skip-category-limit         Skip 'limit number of categories' check.\n    --skip-unique-var-name        Skip 'unique variable name' check.\n    --structure-prior  arg        Structure prior.\n    --thread  arg                 Number of threads.\n    --verbose                     Print additional information.", 
            "title": "causal-cmd usage for FGS for discrete data"
        }, 
        {
            "location": "/causal-cmd/#causal-cmd-usage-for-gfci-for-continuous-data", 
            "text": "usage: java -jar causal-cmd.jar --algorithm gfcic [--alpha  arg ] [-d  arg ] [--exclude-variables  arg ] -f  arg  [--faithfulness-assumed  arg ] [--help] [--json] [--knowledge  arg ] [--max-indegree  arg ] [--no-validation-output] [-o  arg ] [--output-prefix  arg ] [--penalty-discount  arg ] [--skip-latest] [--skip-non-zero-variance] [--skip-unique-var-name] [--thread  arg ] [--verbose]\n    --alpha  arg                   Penalty discount. Default 4.\n -d,--delimiter  arg               Data delimiter either comma, semicolon, space, colon, or tab. Default: comma for *.csv, else tab.\n    --exclude-variables  arg       A file containing variables to exclude.\n -f,--data  arg                    Data file.\n    --faithfulness-assumed  arg    Yes if (one edge) faithfulness should be assumed. Default false.\n    --help                         Show help.\n    --json                         Create JSON output.\n    --knowledge  arg               A file containing prior knowledge.\n    --max-indegree  arg            Maximum indegree of graph. Default 100.\n    --no-validation-output         No validation output files created.\n -o,--out  arg                     Output directory.\n    --output-prefix  arg           Prefix name for output files.\n    --penalty-discount  arg        Penalty discount. Default 4.\n    --skip-latest                  Skip checking for latest software version\n    --skip-non-zero-variance       Skip check for zero variance variables.\n    --skip-unique-var-name         Skip check for unique variable names.\n    --thread  arg                  Number of threads.\n    --verbose                      Print additional information.", 
            "title": "causal-cmd usage for GFCI for continuous data"
        }, 
        {
            "location": "/causal-cmd/#prior-knowledge-file-example", 
            "text": "/knowledge\naddtemporal\n1 spending_per_stdt fac_salary stdt_tchr_ratio \n2 rjct_rate stdt_accept_rate \n3 tst_scores stdt_clss_stndng \n4* grad_rate \n\nforbiddirect\nx3 x4\n\nrequiredirect\nx1 x2  The first line must say /knowledge The three sections of knowledge are   forbiddirect - forbidden edges indicated by a list of pairs of variables  requireddirect - required edges indicated by a list of pairs of variables  addtemporal - tiers of variables where the first tier preceeds the last. Adding a asterisk next to the tier id prohibits edges between tier variables.", 
            "title": "Prior knowledge file example"
        }, 
        {
            "location": "/causal-web/", 
            "text": "Causal Web Application Quick Start and User Guide\n\n\nCreating Your Account\n\n\nWe are currently hosting an the Causal Web Application at the Pittsburgh Supercomputing Center. The url for the site is \nhere\n. On the button of the login page, there is a signup link. Click it!\n\n\n\n\nFill your information in the signup page. \nMake sure to read the \nTerms \n Conditions\n agreement and check the agree box before clicking the green signup button.\n\n\n\n\nThe system will send an email with an activation link. After clicking on the link, the Causal Web system shows a confirmation message.\n\n\n\n\nClick on the link in the email. Alternatively, click on the \n\"University\"\n button to login to the Causal Web via your Pitt/Harvard account.\n\n\n\n\nLogin to Causal Web Application\n\n\nInput your email address and password that you want to use to register with the Causal Web system. \nCheck the Remember Me checkbox if you would like the browser automatically log you in next time you visit.\n\n\n\n\nHere we go! You are now in the Causal Web application.\n\n\n\n\nUploading Your Dataset\n\n\nClick on the Data Management link on the navigation bar on the left side. There is a sub menu that will appear. Click on the Import Data link.\n\n\n\n\nYou can \nEITHER\n drag \n drop dataset file(s) into the dash-surrounded canvas \nOR\n \nyou can click on the \nBrowse\n button and choose the dataset file(s) you would like to upload to the Causal Web application. For testing purposes download this dataset: \nRetention.txt\n and upload it.\n\n\n\n\nThe \nImport Data\n panel shows the dataset upload progress as a percentage along with MD5 checksums (confirms that an uploaded file's contents are unchanged after upload) for each of uploaded files.\n\n\n\n\nYou can also pause the upload of files and resume later. In the case of a disrupted connection, you can resume the upload by repeating the previous steps. The Causal Web application will detect the unfinished upload and resume from the latest point of the last attempt.\n\n\nOnce all your dataset file(s) are all uploaded, the progress bar will show the \n(completed)\n sign.\n\n\nSummarizing Your Dataset\n\n\nBefore any analysis can proceed, the datasets need to be summarized. Specifically, you must indicate the delimiter used in the data file (tab vs. comma), and the types of variables found in the file. Once this is done, the Causal Web application will determine the number of columns (features) and rows (records) in the dataset. \n\n\nClick on the \nData Management\n menu on the navigation bar on the left side. The sub menu will slowly appear. Click on the \nDatasets\n menu.\n\n\n\n\nThe dataset page shows a list of datasets and their attributes. On the second \nSummarized\n column from the right, the yellow warning buttons indicate that the system has not yet summarized.\n\n\n\n\nClick on the dataset's name's link to see the dataset information. From this stage, the data summary information is missing: the dataset needs to be summarized before conducting causal analysis.\n\n\n\n\nFrom the dataset page, click on the yellow warning button to summarize a dataset. The data summarization page shows information of the dataset, its basic information, and additional information that will be determined after summarization (a number of rows and columns). The bottom panel has two radio boxes for you to choose variable type (continuous or discrete), and delimiter (tab or comma). The Retention.txt dataset described above is tab-delimited and contains continous variables.\n\n\n\n\nOnce the dataset is summarized, the dataset page changes its sign to be a green button. Click to see the additional information of this summarized dataset.\n\n\n\n\nClick on the dataset's name's link to see the additional information.\n\n\n\n\nUploading the Prior Knowledge\n\n\nClick on the \nData Management\n menu on the navigation bar on the left side. There is a sub menu that will appear. \nClick on the \nImport Data\n menu.\n\n\n\n\nYou can EITHER drag \n drop prior knowledge file(s) into the dash-surrounded canvas OR \nyou can click on the Browse button and choose the prior knowledge file(s) you would like to upload to the CCD Web application. Note that the prior knowledge file needs to have \n.prior\n file extension.\n\n\n\n\nExecuting an Analysis on Your Dataset\n\n\nClick on the Causal Discovery menu on the navigation bar on the left side. The sub menu will slowly appear. \nClick on the desired algorithms. As of November 2016, \nFGS\n \n(Continuous)\n, \nFGS Discrete\n, and \nGFCI\n \n(Continuous)\n are the only supported algorithms.\n\n\n\n\nThe \nDataset\n drop-down box contains a list of datasets that the system recognize. If those datasets are already uploaded and they are not displayed in the dataset drop-down box, it means that the \nData Summarization\n process to be reviewed in the first place prior to execute a causal \nFGS\n \n(Continuous)\n analysis. \nIf a prior knowledge file needs to be computed, Prior Knowledge File drop-down box contains a list of knowledge files. \nBefore clicking the \nNext\n button, the data validation parameters need to be input.\n\n\n\n\nHere, the \nFGS\n algorithm page allows user to modify its parameters. \n\n\n\n\nThe first one is Penalty Discount and its default value is 4. \n\n\nThe second one is Search Maximum Degree and its default value is 100. \n\n\nThe third one is Faithfulness Assumed and its default value is checked.\n\n\nThe fifth one is Verbose output and its default value is checked.\n\n\n\n\nClick \nNext\n to proceed or click Advanced Options (JVM) for the JVM customization.\n\n\n\n\nExpert Mode\n: the JVM parameters allow users to customize JVM parameters such how much maximum memory (in Gigabyte scale) the process would allocate (e.g. 4).\n\n\n\n\nThis is the summary page before the FGS job analysis is put into the queue. \nClick on the number 1 (Select Dataset) or number 2 (Set Parameters) to go back to modify the parameters. \nOnce, everything is set. Click the \nRun Algorithm!\n button.\n\n\n\n\nThe application will redirect the \nJob Queue\n page. The analysis job is added to the queue. The \nQueued\n status means that it waits for the scheduler to run it once the executing slot is available. However, the \nJob Queue\n page does not currently automatically update the jobs' status (at least in this development stage). Refresh the \nJob Queue\n page from time to time to see the latest jobs' status.\n\n\n\n\nOnce the job slot is available, the queued job is then executed and its status changes to \nRunning\n.\n\n\n\n\nWhen the job is finished, it is automatically removed from the \nJob Queue\n page. The result of the analysis is added to the Results page.\n\n\n\n\nIn case the \nqueued\n or \nrunning\n job needs to be killed or removed, click the \nRemove\n button on the first column on the \nJob Queue\n page from the right. \nThe \nRemove Job\n confirmation page is popped up. Click \nYes\n to kill the job or \nNo\n to cancel the kill operation.\n\n\n\n\nAfter the job cancellation is confirmed, the job's status changes to \nKill Request\n. The scheduler will take care of removing of the job from the queue or killing a job in the server.\n\n\n\n\nIf the running job was killed or any error happened during the process, the error result will appear in the \nResults\n page. Its background is highlighted in red.\n\n\n\n\nIf there is an error, you will see the details of the error by clicking on error result link.\n\n\n\n\nReviewing Your Result\n\n\nClick on the \nResults\n menu on the navigation bar on the left side. \nClick on the \nAlgorithm Results\n menu.\n\n\n\n\nThe \nAlgorithm Results\n page shows a list of results, their creation time and their size. On the first column from the right, the green \nSave\n buttons provide the ability for users to download results to their local computers. \nClick on the result's name's link to see a causal graph of the result.\n\n\nCheck the result files on their checkboxes to \ncompare the results\n. \n\nNote\n: a number of comparing datasets can be more than two files.\n\n\n\n\nThe results page details the graph, the original dataset, and its parameters. \nClick on the \nView Full Screen\n button to see the causal graph in more detail.\n\n\n\n\nThe figure shows the causal graph in the full-screen mode.\n\n\n\n\nComparing Your Result\n\n\nClick on the \nResults\n menu on the navigation bar on the left side. To compare two results click on the Algorithm Results item on the left. Select at least two results (place a checkmark next to the results) and click on Compare. Now click on the \nResult Comparisions\n item on the left.\n\n\n\n\nThe Result Comparisons page shows a list of results, their creation time and their size. On the first column from the right, the green Save buttons provide the ability for users to download results to their local computers. Click on the result's name's the link to see the detail of the result comparisons.\n\n\n\n\nThe \nResult Comparisons\n page shows the datasets compared, and the table of edges, their mutual appearance in all comparing datasets, and their mutual endpoint types.\n\n\n\n\nDownloading Your Result And Comparision Result\n\n\nOn the first column from the right of the \nAlgorithm Results\n page, the green \nSave\n buttons provide the ability for users to download results to their local computers.\n\n\n\n\nOn the first column from the right of the \nResult Comparisions\n page, the green \nSave\n buttons provide the ability for users to download result comparisons to their local computers.\n\n\n\n\nSubmit Your Feedback\n\n\nClick the \nFeedback\n menu on the navigation menu bar on the left. \nThe \nFeedback\n page shows the email (optional), and the text area for the user feedback (required). \nOnce, the feedback is filled, click the \nSend Feedback\n button.\n\n\n\n\nThe green \nThank you for you feedback!\n banner shows that the feedback submitted successfully.", 
            "title": "Causal Web"
        }, 
        {
            "location": "/causal-web/#causal-web-application-quick-start-and-user-guide", 
            "text": "", 
            "title": "Causal Web Application Quick Start and User Guide"
        }, 
        {
            "location": "/causal-web/#creating-your-account", 
            "text": "We are currently hosting an the Causal Web Application at the Pittsburgh Supercomputing Center. The url for the site is  here . On the button of the login page, there is a signup link. Click it!   Fill your information in the signup page. \nMake sure to read the  Terms   Conditions  agreement and check the agree box before clicking the green signup button.   The system will send an email with an activation link. After clicking on the link, the Causal Web system shows a confirmation message.   Click on the link in the email. Alternatively, click on the  \"University\"  button to login to the Causal Web via your Pitt/Harvard account.", 
            "title": "Creating Your Account"
        }, 
        {
            "location": "/causal-web/#login-to-causal-web-application", 
            "text": "Input your email address and password that you want to use to register with the Causal Web system. \nCheck the Remember Me checkbox if you would like the browser automatically log you in next time you visit.   Here we go! You are now in the Causal Web application.", 
            "title": "Login to Causal Web Application"
        }, 
        {
            "location": "/causal-web/#uploading-your-dataset", 
            "text": "Click on the Data Management link on the navigation bar on the left side. There is a sub menu that will appear. Click on the Import Data link.   You can  EITHER  drag   drop dataset file(s) into the dash-surrounded canvas  OR  \nyou can click on the  Browse  button and choose the dataset file(s) you would like to upload to the Causal Web application. For testing purposes download this dataset:  Retention.txt  and upload it.   The  Import Data  panel shows the dataset upload progress as a percentage along with MD5 checksums (confirms that an uploaded file's contents are unchanged after upload) for each of uploaded files.   You can also pause the upload of files and resume later. In the case of a disrupted connection, you can resume the upload by repeating the previous steps. The Causal Web application will detect the unfinished upload and resume from the latest point of the last attempt.  Once all your dataset file(s) are all uploaded, the progress bar will show the  (completed)  sign.", 
            "title": "Uploading Your Dataset"
        }, 
        {
            "location": "/causal-web/#uploading-the-prior-knowledge", 
            "text": "Click on the  Data Management  menu on the navigation bar on the left side. There is a sub menu that will appear. \nClick on the  Import Data  menu.   You can EITHER drag   drop prior knowledge file(s) into the dash-surrounded canvas OR \nyou can click on the Browse button and choose the prior knowledge file(s) you would like to upload to the CCD Web application. Note that the prior knowledge file needs to have  .prior  file extension.", 
            "title": "Uploading the Prior Knowledge"
        }, 
        {
            "location": "/causal-web/#executing-an-analysis-on-your-dataset", 
            "text": "Click on the Causal Discovery menu on the navigation bar on the left side. The sub menu will slowly appear. \nClick on the desired algorithms. As of November 2016,  FGS   (Continuous) ,  FGS Discrete , and  GFCI   (Continuous)  are the only supported algorithms.   The  Dataset  drop-down box contains a list of datasets that the system recognize. If those datasets are already uploaded and they are not displayed in the dataset drop-down box, it means that the  Data Summarization  process to be reviewed in the first place prior to execute a causal  FGS   (Continuous)  analysis. \nIf a prior knowledge file needs to be computed, Prior Knowledge File drop-down box contains a list of knowledge files. \nBefore clicking the  Next  button, the data validation parameters need to be input.   Here, the  FGS  algorithm page allows user to modify its parameters.    The first one is Penalty Discount and its default value is 4.   The second one is Search Maximum Degree and its default value is 100.   The third one is Faithfulness Assumed and its default value is checked.  The fifth one is Verbose output and its default value is checked.   Click  Next  to proceed or click Advanced Options (JVM) for the JVM customization.   Expert Mode : the JVM parameters allow users to customize JVM parameters such how much maximum memory (in Gigabyte scale) the process would allocate (e.g. 4).   This is the summary page before the FGS job analysis is put into the queue. \nClick on the number 1 (Select Dataset) or number 2 (Set Parameters) to go back to modify the parameters. \nOnce, everything is set. Click the  Run Algorithm!  button.   The application will redirect the  Job Queue  page. The analysis job is added to the queue. The  Queued  status means that it waits for the scheduler to run it once the executing slot is available. However, the  Job Queue  page does not currently automatically update the jobs' status (at least in this development stage). Refresh the  Job Queue  page from time to time to see the latest jobs' status.   Once the job slot is available, the queued job is then executed and its status changes to  Running .   When the job is finished, it is automatically removed from the  Job Queue  page. The result of the analysis is added to the Results page.   In case the  queued  or  running  job needs to be killed or removed, click the  Remove  button on the first column on the  Job Queue  page from the right. \nThe  Remove Job  confirmation page is popped up. Click  Yes  to kill the job or  No  to cancel the kill operation.   After the job cancellation is confirmed, the job's status changes to  Kill Request . The scheduler will take care of removing of the job from the queue or killing a job in the server.   If the running job was killed or any error happened during the process, the error result will appear in the  Results  page. Its background is highlighted in red.   If there is an error, you will see the details of the error by clicking on error result link.", 
            "title": "Executing an Analysis on Your Dataset"
        }, 
        {
            "location": "/causal-web/#reviewing-your-result", 
            "text": "Click on the  Results  menu on the navigation bar on the left side. \nClick on the  Algorithm Results  menu.   The  Algorithm Results  page shows a list of results, their creation time and their size. On the first column from the right, the green  Save  buttons provide the ability for users to download results to their local computers. \nClick on the result's name's link to see a causal graph of the result.  Check the result files on their checkboxes to  compare the results .  Note : a number of comparing datasets can be more than two files.   The results page details the graph, the original dataset, and its parameters. \nClick on the  View Full Screen  button to see the causal graph in more detail.   The figure shows the causal graph in the full-screen mode.", 
            "title": "Reviewing Your Result"
        }, 
        {
            "location": "/causal-web/#downloading-your-result-and-comparision-result", 
            "text": "On the first column from the right of the  Algorithm Results  page, the green  Save  buttons provide the ability for users to download results to their local computers.   On the first column from the right of the  Result Comparisions  page, the green  Save  buttons provide the ability for users to download result comparisons to their local computers.", 
            "title": "Downloading Your Result And Comparision Result"
        }, 
        {
            "location": "/causal-web/#submit-your-feedback", 
            "text": "Click the  Feedback  menu on the navigation menu bar on the left. \nThe  Feedback  page shows the email (optional), and the text area for the user feedback (required). \nOnce, the feedback is filled, click the  Send Feedback  button.   The green  Thank you for you feedback!  banner shows that the feedback submitted successfully.", 
            "title": "Submit Your Feedback"
        }, 
        {
            "location": "/py-causal/", 
            "text": "py-causal\n\n\nPython APIs\n for causal modeling algorithms developed by the University of Pittsburgh/Carnegie Mellon University \nCenter for Causal Discovery\n. \n\n\nThis code is distributed under the LGPL 2.1 license.\n\n\nRequirements:\n\n\nPython 2.7 (does not work with Python 3)\n\n\n\n\njavabridge\n=1.0.11\n\n\npandas\n\n\nnumpy \n\n\npydot\n\n\nGraphViz\n\n\nJDK 1.7+\n\n\n\n\nInstallation overview:\n\n\nWe have found two approaches to be useful:\n\n Direct python installation with pip, possibly including use of \nJupyter\n. This approach is likely best for users who have Python installed and are familiar with installing Python modules.\n\n Installation via \nAnaconda\n, which  installs Python and related utilities.\n\n\nDirections for both approaches are given below...\n\n\nInstallation with pip\n\n\nIf you do not have pip installed already, try \nthese instructions\n.\n\n\nOnce pip is installed, execute these commands\n\n\npip install numpy\npip install pandas\npip install javabridge\npip install pydot \npip install GraphViz\n\n\n\nNote: you also need to install the GraphViz engine by following \nthese instructions\n.\n\n\nWe have observed that on some OS X installations, pydot may provide the following response\n    Couldn't import dot_parser, loading of dot files will not be possible.\n\n\nIf you see this, try the following\n\n\n pip uninstall pydot\n pip install pyparsing==1.5.7\n pip install pydot\n\n\n\nThen, from within the py-causal directory, run the following command:\n\n\npython setup.py install\n\n\n\nAfter running this command, enter a python shell and attempt the follwing import\n    import pandas as pd\n    import pydot\n    from tetrad import search as s\n\n\nFinally, try to run the python \nexample\n\n\npython py-causal-fgs-continuous-example.py\n\n\n\nBe sure to run this from within the py-causal directory.\n\n\nThis program will create a file named tetrad.svg, which should be viewable in any SVG capable program. If you see a causal graph, everything is working correctly.\n\n\nRunning Jupyter/IPython\n\n\nWe have found \nJupyter\n notebooks to be helpful. (Those who have run IPython in the past should know that Jupyter is simply a new name for IPython). To add Jupyter to your completed python install, simply run\n\n\npip -U jupyter\njupyter notebook\n\n\n\nand then load one of the Jupyter notebooks found in this installation. \n\n\nAnaconda/Jupyter\n\n\nInstalling Python with Anaconda and Jupyter may be easier for some users:\n\n\n\n\nDownload and install Anaconda\n\n\nconda install python-javabridge\n\n\n\n\nFor OS X, this default install does not seem to work well. try the following instead:\n\n\nconda install --channel https://conda.anaconda.org/david_baddeley python-javabridge\n\n\n\nThen run the following to configure anacoda\n\n\nconda install pandas  \nconda install numpy\nconda install pydot\nconda install graphviz \nconda install -c https://conda.anaconda.org/chirayu pycausal \njupyter notebook\n\n\n\nand then load one of the Jupyter notebooks.\n\n\nDocker Image\n\n\nThe pre-installed py-causal Docker image is also available at \nDocker Hub", 
            "title": "Py-causal"
        }, 
        {
            "location": "/py-causal/#py-causal", 
            "text": "Python APIs  for causal modeling algorithms developed by the University of Pittsburgh/Carnegie Mellon University  Center for Causal Discovery .   This code is distributed under the LGPL 2.1 license.", 
            "title": "py-causal"
        }, 
        {
            "location": "/py-causal/#requirements", 
            "text": "Python 2.7 (does not work with Python 3)   javabridge =1.0.11  pandas  numpy   pydot  GraphViz  JDK 1.7+", 
            "title": "Requirements:"
        }, 
        {
            "location": "/py-causal/#installation-overview", 
            "text": "We have found two approaches to be useful:  Direct python installation with pip, possibly including use of  Jupyter . This approach is likely best for users who have Python installed and are familiar with installing Python modules.  Installation via  Anaconda , which  installs Python and related utilities.  Directions for both approaches are given below...", 
            "title": "Installation overview:"
        }, 
        {
            "location": "/py-causal/#installation-with-pip", 
            "text": "If you do not have pip installed already, try  these instructions .  Once pip is installed, execute these commands  pip install numpy\npip install pandas\npip install javabridge\npip install pydot \npip install GraphViz  Note: you also need to install the GraphViz engine by following  these instructions .  We have observed that on some OS X installations, pydot may provide the following response\n    Couldn't import dot_parser, loading of dot files will not be possible.  If you see this, try the following   pip uninstall pydot\n pip install pyparsing==1.5.7\n pip install pydot  Then, from within the py-causal directory, run the following command:  python setup.py install  After running this command, enter a python shell and attempt the follwing import\n    import pandas as pd\n    import pydot\n    from tetrad import search as s  Finally, try to run the python  example  python py-causal-fgs-continuous-example.py  Be sure to run this from within the py-causal directory.  This program will create a file named tetrad.svg, which should be viewable in any SVG capable program. If you see a causal graph, everything is working correctly.", 
            "title": "Installation with pip"
        }, 
        {
            "location": "/py-causal/#running-jupyteripython", 
            "text": "We have found  Jupyter  notebooks to be helpful. (Those who have run IPython in the past should know that Jupyter is simply a new name for IPython). To add Jupyter to your completed python install, simply run  pip -U jupyter\njupyter notebook  and then load one of the Jupyter notebooks found in this installation.", 
            "title": "Running Jupyter/IPython"
        }, 
        {
            "location": "/py-causal/#anacondajupyter", 
            "text": "Installing Python with Anaconda and Jupyter may be easier for some users:   Download and install Anaconda  conda install python-javabridge   For OS X, this default install does not seem to work well. try the following instead:  conda install --channel https://conda.anaconda.org/david_baddeley python-javabridge  Then run the following to configure anacoda  conda install pandas  \nconda install numpy\nconda install pydot\nconda install graphviz \nconda install -c https://conda.anaconda.org/chirayu pycausal \njupyter notebook  and then load one of the Jupyter notebooks.", 
            "title": "Anaconda/Jupyter"
        }, 
        {
            "location": "/py-causal/#docker-image", 
            "text": "The pre-installed py-causal Docker image is also available at  Docker Hub", 
            "title": "Docker Image"
        }, 
        {
            "location": "/r-causal/", 
            "text": "r-causal\n\n\nR Wrapper\n for Tetrad Library\n\n\nR Library Requirement\n\n\nR \n= 3.2.0, \n\nstringr\n,\n\nrJava\n, \n\ngraph\n, \n\nRBGL\n, \n\nRgraphviz\n\n\nInstallation\n\n\n\n\nInstall the R library requirements:\n\n\n\n\ninstall.packages(\nstringr\n)\ninstall.packages(\nrJava\n)\n## try http:// if https:// URLs are not supported\nsource(\nhttps://bioconductor.org/biocLite.R\n) \nbiocLite(\ngraph\n)\nbiocLite(\nRBGL\n)\nbiocLite(\nRgraphviz\n) # For plotting graph\n\n\n\n\n\n\nInstall r-causal from github:\n\n\n\n\nlibrary(devtools)\ninstall_github(\nbd2kccd/r-causal\n)\n\n\n\n\nExample\n\n\nContinuous Dataset\n\n\nlibrary(rcausal)\ndata(\ncharity\n)   #Load the charity dataset\n\n#Compute FGS search\nfgs \n- fgs(df = charity, penaltydiscount = 2, maxDegree = -1,  \nfaithfulnessAssumed = TRUE, numOfThreads = 2, verbose = TRUE)    \n\nfgs$parameters #Show the FGS's parameters\nfgs$datasets #Show the dataset\nfgs$nodes #Show the result's nodes\nfgs$edges #Show the result's edges\n\nlibrary(Rgraphviz)\nplot(fgs$graphNEL) #Plot the causal model\n\n\n\n\nDiscrete Dataset\n\n\nlibrary(rcausal)\ndata(\naudiology\n)    #Load the charity dataset\n#Compute FGS search\nfgs.discrete \n- fgs.discrete(df=audiology,structurePrior=1.0,samplePrior=1.0, \nmaxDegree = -1, faithfulnessAssumed = TRUE, numOfThreads = 2,verbose = TRUE)\nfgs.discrete$parameters #Show the FGS Discrete's parameters\nfgs.discrete$datasets #Show the dataset\nfgs.discrete$nodes #Show the result's nodes\nfgs.discrete$edges #Show the result's edges\nlibrary(Rgraphviz)\nplot(fgs.discrete$graphNEL) #Plot the causal model\n\n\n\n\nPrior Knowledge\n\n\nCreate PriorKnowledge Object\n\n\nforbid \n- list(c('TangibilityCondition','Impact')) # List of forbidden directed edges\nrequire \n- list(c('Sympathy','TangibilityCondition')) # List of required directed edges\nforbiddenWithin \n- c('TangibilityCondition','Imaginability')\nclass(forbiddenWithin) \n- 'forbiddenWithin' # Make this tier forbidden within\ntemporal \n- list(forbiddenWithin, c('Sympathy','AmountDonated'),c('Impact')) # List of temporal node tiers\nprior \n- priorKnowledge(forbiddirect = forbid, requiredirect = require, addtemporal = temporal)\nfgs \n- fgs(df = charity, penaltydiscount = 2, depth = -1, ignoreLinearDependence = TRUE, \nheuristicSpeedup = TRUE, numOfThreads = 2, verbose = TRUE, priorKnowledge = prior)\n\n\n\n\nLoad Knowledge File\n\n\n# knowledge file: audiology.prior\n# /knowledge\n# forbiddirect\n# class tymp\n# class age_gt_60\n# class notch_at_4k\n# \n# requiredirect\n# history_noise class\n#\n# addtemporal\n# 0* bser late_wave_poor tymp notch_at_4k o_ar_c ar_c airBoneGap air bone o_ar_u airBoneGap\n# 1 history_noise history_dizziness history_buzzing history_roaring history_recruitment history_fluctuating history_heredity history_nausea\n# 2 class\n\nprior \n- priorKnowledgeFromFile('audiology.prior')\nfgs.discrete \n- fgs.discrete(df=audiology,structurePrior=1.0,samplePrior=1.0, \ndepth = -1, heuristicSpeedup = TRUE, numOfThreads = 2,verbose = TRUE, priorKnowledge = prior)\n\n\n\n\nConvert Rgraphviz to igraph one\n\n\nlibrary(igraph)\nigraph \n- igraph.from.graphNEL(fgs.discrete$graphNEL)\nplot(igraph)\n\n\n\n\nUseful \nrJava\n Trouble-shooting Installation in Mac OS X Links\n\n\n\n\nhttp://stackoverflow.com/questions/26948777/how-can-i-make-rjava-use-the-newer-version-of-java-on-osx/32544358#32544358\n\n\nhttp://andrewgoldstone.com/blog/2015/02/03/rjava/", 
            "title": "R-causal"
        }, 
        {
            "location": "/r-causal/#r-causal", 
            "text": "R Wrapper  for Tetrad Library", 
            "title": "r-causal"
        }, 
        {
            "location": "/r-causal/#r-library-requirement", 
            "text": "R  = 3.2.0,  stringr , rJava ,  graph ,  RBGL ,  Rgraphviz", 
            "title": "R Library Requirement"
        }, 
        {
            "location": "/r-causal/#installation", 
            "text": "Install the R library requirements:   install.packages( stringr )\ninstall.packages( rJava )\n## try http:// if https:// URLs are not supported\nsource( https://bioconductor.org/biocLite.R ) \nbiocLite( graph )\nbiocLite( RBGL )\nbiocLite( Rgraphviz ) # For plotting graph   Install r-causal from github:   library(devtools)\ninstall_github( bd2kccd/r-causal )", 
            "title": "Installation"
        }, 
        {
            "location": "/r-causal/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/r-causal/#continuous-dataset", 
            "text": "library(rcausal)\ndata( charity )   #Load the charity dataset\n\n#Compute FGS search\nfgs  - fgs(df = charity, penaltydiscount = 2, maxDegree = -1,  \nfaithfulnessAssumed = TRUE, numOfThreads = 2, verbose = TRUE)    \n\nfgs$parameters #Show the FGS's parameters\nfgs$datasets #Show the dataset\nfgs$nodes #Show the result's nodes\nfgs$edges #Show the result's edges\n\nlibrary(Rgraphviz)\nplot(fgs$graphNEL) #Plot the causal model", 
            "title": "Continuous Dataset"
        }, 
        {
            "location": "/r-causal/#discrete-dataset", 
            "text": "library(rcausal)\ndata( audiology )    #Load the charity dataset\n#Compute FGS search\nfgs.discrete  - fgs.discrete(df=audiology,structurePrior=1.0,samplePrior=1.0, \nmaxDegree = -1, faithfulnessAssumed = TRUE, numOfThreads = 2,verbose = TRUE)\nfgs.discrete$parameters #Show the FGS Discrete's parameters\nfgs.discrete$datasets #Show the dataset\nfgs.discrete$nodes #Show the result's nodes\nfgs.discrete$edges #Show the result's edges\nlibrary(Rgraphviz)\nplot(fgs.discrete$graphNEL) #Plot the causal model", 
            "title": "Discrete Dataset"
        }, 
        {
            "location": "/r-causal/#prior-knowledge", 
            "text": "", 
            "title": "Prior Knowledge"
        }, 
        {
            "location": "/r-causal/#create-priorknowledge-object", 
            "text": "forbid  - list(c('TangibilityCondition','Impact')) # List of forbidden directed edges\nrequire  - list(c('Sympathy','TangibilityCondition')) # List of required directed edges\nforbiddenWithin  - c('TangibilityCondition','Imaginability')\nclass(forbiddenWithin)  - 'forbiddenWithin' # Make this tier forbidden within\ntemporal  - list(forbiddenWithin, c('Sympathy','AmountDonated'),c('Impact')) # List of temporal node tiers\nprior  - priorKnowledge(forbiddirect = forbid, requiredirect = require, addtemporal = temporal)\nfgs  - fgs(df = charity, penaltydiscount = 2, depth = -1, ignoreLinearDependence = TRUE, \nheuristicSpeedup = TRUE, numOfThreads = 2, verbose = TRUE, priorKnowledge = prior)", 
            "title": "Create PriorKnowledge Object"
        }, 
        {
            "location": "/r-causal/#load-knowledge-file", 
            "text": "# knowledge file: audiology.prior\n# /knowledge\n# forbiddirect\n# class tymp\n# class age_gt_60\n# class notch_at_4k\n# \n# requiredirect\n# history_noise class\n#\n# addtemporal\n# 0* bser late_wave_poor tymp notch_at_4k o_ar_c ar_c airBoneGap air bone o_ar_u airBoneGap\n# 1 history_noise history_dizziness history_buzzing history_roaring history_recruitment history_fluctuating history_heredity history_nausea\n# 2 class\n\nprior  - priorKnowledgeFromFile('audiology.prior')\nfgs.discrete  - fgs.discrete(df=audiology,structurePrior=1.0,samplePrior=1.0, \ndepth = -1, heuristicSpeedup = TRUE, numOfThreads = 2,verbose = TRUE, priorKnowledge = prior)", 
            "title": "Load Knowledge File"
        }, 
        {
            "location": "/r-causal/#convert-rgraphviz-to-igraph-one", 
            "text": "library(igraph)\nigraph  - igraph.from.graphNEL(fgs.discrete$graphNEL)\nplot(igraph)", 
            "title": "Convert Rgraphviz to igraph one"
        }, 
        {
            "location": "/r-causal/#useful-rjava-trouble-shooting-installation-in-mac-os-x-links", 
            "text": "http://stackoverflow.com/questions/26948777/how-can-i-make-rjava-use-the-newer-version-of-java-on-osx/32544358#32544358  http://andrewgoldstone.com/blog/2015/02/03/rjava/", 
            "title": "Useful rJava Trouble-shooting Installation in Mac OS X Links"
        }
    ]
}